namespace _4._Matrix_Shuffling
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] data = Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

            int rows = data[0];
            int cols = data[1];

            string[,] matrix = new string[rows, cols];

            for (int row = 0; row < rows; row++)
            {
                string[] values = Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries);

                for (int col = 0; col < cols; col++)
                {
                    matrix[row, col] = values[col];
                }
            }

            string input;

            while ((input = Console.ReadLine()) != "END")
            {                              

                if (isValidCommand(input, rows, cols))
                {
                    string[] tokens = input.Split(" ", StringSplitOptions.RemoveEmptyEntries);

                    int row1 = int.Parse(tokens[1]);
                    int col1 = int.Parse(tokens[2]);
                    int row2 = int.Parse(tokens[3]);
                    int col2 = int.Parse(tokens[4]);

                    string temp = matrix[row1, col1];
                    matrix[row1, col1] = matrix[row2, col2];
                    matrix[row2, col2] = temp;
                    
                    for(int row = 0; row < rows; row++)
                    {
                        for(int col = 0; col < cols; col++)
                        {
                            Console.Write($"{matrix[row, col]} ");
                        }

                        Console.WriteLine();
                    }

                }
                else
                {
                    Console.WriteLine("Invalid input!");
                }
            }
        }

        static bool isValidCommand(string input, int rows, int cols)
        {
            string[] tokens = input.Split(" ", StringSplitOptions.RemoveEmptyEntries);

            bool isValidName = tokens[0] == "swap";
            bool isValidCount = tokens.Length == 5;
            bool isValidRowsAndCols = false;


            if (isValidName && isValidCount)
            {

                int row1 = int.Parse(tokens[1]);
                int col1 = int.Parse(tokens[2]);
                int row2 = int.Parse(tokens[3]);
                int col2 = int.Parse(tokens[4]);

                isValidRowsAndCols = row1 >= 0 && row1 < rows
                && col1 >= 0 && col1 < cols
                && row2 >= 0 && row2 < rows
                && col2 >= 0 && col2 < cols;

            }

            return isValidName && isValidCount && isValidRowsAndCols;
            

            
        }
    
    } 
}
